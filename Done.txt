Convert to VS2012

Added PDB output:
Anyway, it would be possible to update ACME to output a full debug map for each memory location with source file and line number.
It would also be possible to accurately save out what labels and bytes for what memory are where.
Including zone information would allow local labels to be displayed first within the zone scope.

Then use the remote debugger to display nice binary disassembly and source code mixed in.

Implementation notes:
*Functions like "real_output" can be used to provide extensive debug information.
For example when "*write_ptr++" is used.
*Look for Parse_and_close_file, tends to be used for source input files.
Look at Input_new_file it has Input_now->line_number and Input_now->original_filename already setup

*Implement the file write for PDB_filename in ACME_finalize after it does vicelabeldump_filename
	In PDBSave()

*Output format:
FILES:<dec num for the number of files used>
<index0>:<filename>
...
ADDRS:<dec num of the addresses used>
$<hex num address>:<dec zone>:<dec index into FILES>:<dec line number>
...
LABELS:<dec num of the labels>
$<hex num>:<dec zone>:<text label>:<1/0 = USED>:<1/0 = ADDR>
...



Rebuilt the project from scratch to avoid problems with the conversion from the DSW/DSP

Address needs zone list when it changes


Improved PO: "!binary" now has "interleave" parameter.



* Added VICEPDBMonitor
VICE C64 remote debugging
Using VICE x64.exe -remotemonitor
Then telnet localhost 6510
It's possible to break into the execution by sending a character. For example to get new "m 0000" memory while it's running code. Or to break execution for step with 'z'.




* When assembling, if a variable is forward referenced (unknown) for !for or other macros, then assume it is 1 on the first pass, then if the value changes in later passes, re-visit the code with the new values.
	If the value is unchanged during a pass and still unknown then report it cannot be resolved.
	Or if the variable changes too many times during passes, report it cannot converge to a stable value.
	* See "TestForForwardReference.a" for an example
	* ALU_defined_int() could try to use ALU_any_int() and note the expression used with the zone+file+line and if the expression is unknown too many times then give up.
		Increment pass_undefined_count when the expression is unknown or changes from previous value
		Label_set_value() will need an override that ignores any redefinition when an undefined label used by !for is encountered
	* To help give a hint where the new forward reference attempts were used, a new serious error was created "Value not defined. Even after several attempts."
	* -v4 will output full debug for detection of changing calculation values to allow these to be efficiently traced



* Might need a !PO to stack and set the verbosity level, then pop the vebosity level:
	To mitigate reporting of this where !for is inside a macro and the values legitimately change: asm/RoadObject_Macro.a(27) : Warning (Macro RoadObject): Detected result change: 143: height:asm/RoadObject_Macro.a:27 : From 17 to 19
	Maybe it's to do with the macro usage not being in a separate zone?
	* Mitigated without verbosity push, but instead added the zone to the calculation history test




* --lib will not allow command line files to be found, expand the file search to use any --lib paths



* !to seems to be outputting the file to the wrong directory (Scroller not Tusari2) when building Tusari2?




* Add "!previouscontext" which will output debug for the previous context level not the current source file/line
	Probably add it near: PREDEFNODE("sal",	PO_sal),	// MPi: Added
	Altering how PDBAddFileLineToAddr is called
	Might be a good place to store nested file/line/zone information:	void Macro_parse_call(void)
	Perhpas "Macro_parse_call" can backup these: Input_now->original_filename , Input_now->line_number , Section_now->zone
	Then if there is a "!previouscontext" then the call to PDBAddFileLineToAddr will use the most recent backups
	Added int previouscontext_enable



* Sorted by address labels output
	void SortFile( const char *filename )
