// Various build options to test with:

// $(ProjectDir)
// -v9 Test.a

// C:\work\C64\Scroller
// -v3 --msvc ScrollEntry.a

// C:\work\c64\Tusari2
// -v4 --msvc --lib ../Scroller/ ScrollEntry.a ScrollEntry_Tusari.a ScrollEntryAfter.a

ACME TODO file.

* Look into VSCode remote debugging into Vice with PDB parsing to enhance the source view



* Look into VS to Vice debugging with ACME
	https://blog.3d-logic.com/2012/05/12/introducing-vintage-studio/

	

* Code re-ordering and register optimisation
	Especially the case where we have code like this:
	!macro FOO {
		lda #$ff
		sta address
	}
	!macro BAR {
		lda #$ff
		sta address2
	}
		+FOO
		+BAR
	This would typically result in output code:
		lda #$ff
		sta address
		lda #$ff
		sta address2
	Instead optimise this so that it results in:
		lda #$ff
		sta address
		sta address2
	This can be done if there are no references to branch/jump/indrect/store in-between the two stores.

	

* Dead strip code in zones where labels (their memory addresses) are not referenced at all by anything outside that zone.



* Add assembler zone documentation
	!entry	- Document entry status/register/memory locations
	!return	- Document returned status/register/memory locations
	!trashed	- Document trashed status/register/memory locations. Like !return but makes the unknown/trashed state explicit.
	!preserve	- Make status/register/memory explicitly preserved
	!irq		- Flag this as IRQ code
	When any of the above are used then also track all status/register/memory usage for the zone

	


* Use the assembler zone documentation and static analysis to warn when conflicting status/register/memory locations are used in code.
	If the calling zone uses status/register/memory that the called zone does then output an error.
	For example:
	!zn {
	!return A
		foo
			lda #0
>>Warning doThing trashes A>>	jsr doThing
			rts
	}
	!zn {
	!entry
	!return
	doThing
		lda #0
		rts



* When !irq is used, analyse the code to ensure that !preserve registers/locations are restored

	


* Optimising assembly with zone using !optimise
	Use the assembler zone documentation and static analysis to automatically pick optimisations for a zone
	For example:
	!zn {
	!optimise speed
	!entry Y
	!return X
	!trash A,Y
	foo
		iny
		iny
		iny
		iny
		tya
		tax
		rts
	}
	Would optimise to:
	foo
		tya
		clc
		adc #4
		tax
		rts




* !range <label> , <start> , <end> , <step>
	Like !for but has more options for start and step values
