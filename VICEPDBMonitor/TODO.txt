TODO File for VICE PDB Monitor

* Save the command history (and other preferences) in the registry or config file?
	https://stackoverflow.com/questions/8751650/how-to-save-and-use-apps-window-size




* Profiling data can be shown in the disassembly and source views. Basically show the accumulated count for that particular memory location.
	This expands the display outside the labels view



* Profiling: For locations somewhere inside storage areas e.g. ".label !fill 64,0" find the near previous label and use that for reporting
	This expands the display in the labels view

	

* Nice arrow showing loops https://forums.nesdev.com/viewtopic.php?f=12&t=16625&hilit=debugger



* another "smaller" window that holds the command responses. but tabbed is nice :slightly_smiling_face:
	with the memmap code
	could you have it so you display RAM with the knowledge from it
	clear it
	then Show the "delta" which would give you what was exec/read/write since last "check" ?



* also getting F10, F9 and F11 wired up



* now I have the full memory dump I don't need to ask Vice for the disassembly
	which will make the view much easier to code



* Add extra watches view, which is an extra filtered list of variables



* Reduce the code scrolling to more of a push/jump scroll?



* Breakpoint from clicking a source view line
	* Indicate lines with break points set in Vice



* a label search



* a watch window of labels



* probably use the memory interface not the TCP interface



* when it finds a lda (zp,x) or lda (zp),y it looks up contents of ZP and show the @XXXX
	Same for all hex values from the disassembly, convert to known labels with the best zone



* also pulling $01 and working out what bank each command is it... number of times I accidentally load from 



Add IPC that allows commands to be sent from a new EXE instance to a currently running instance.



When showing disassembly without source, if the memory map from the PDB is missing then just to a simple disassembly without trying to step back through memory.
The >>>> display can operate on a flag basis if there is not exact memory/PC match.





The current line should be scrolled to the middle of the source/disassembly view.



// MPi: TODO: Tweak the 20 range based on the display height?
// MPi: TODO: Tweak the - 10 based on the display height?
// MPi: TODO: Tweak the 20 toDisplay based on the display height?
// MPi: TODO: Tweak the 10 range based on the display height?



Maybe the x command can clear the window text, ready for any breakpoint being hit.



ACME Should output previous zone for each zone, that way the hierarchy of zones can be used for label display.
//MPi: TODO: Replace with previous zone in the hierarchy when ACME saves it


For example: reg, memory, io
From this it's possible to display lots of useful source level debugging.
The command "z" can be used to single step.
The command "break" can be used to set a break point.
	Return: BREAK: <dec num breakpoint index>
"del <dec num break point breakpoint index>"
"io" will show all the IO chips status. Useful.



Need something that maps file index and line number pair back to address.
The same file and line number could map to multiple addresses.
Need previous and next addresses setup for each AddrInfo



Possible to show the memory changed since the last step/break/run.
Possible to show the label values changed based on this memory diff.



When a label is in zero page show the lo/hi memory address and a brief memory dump of the target memory contents.



When stepping maintain a history of execution, register values and status states.



* If there is no source available for the address, and if "source" is selected, then show disassembly instead of a blank window.
